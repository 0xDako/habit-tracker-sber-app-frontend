{"version":3,"sources":["GlobalStyles.js","APIHelper.js","components/HabitBox.js","components/HabitCreationForm.js","components/HabitCreationButton.js","components/HabitHeader.js","components/PopupStyledComponent.js","App.js","index.js"],"names":["DocumentStyle","createGlobalStyle","text","background","gradient","ThemeStyle","darkSber","GlobalStyle","API_URL","createUser","UserId","SberId","Name","Age","Gender","a","axios","post","answer","data","DateForEnd","getAllHabit","get","params","HabitId","delete","DateOfActivity","body","console","log","HabitBoxRow","styled","Row","CheckboxContainer","div","IconTrashContainer","HabitCardContainer","CardContent","DateTextBox","TextBox","HabitCard","Card","HabitBox","habitId","habitName","progressValue","maxValue","deleteHabit","habitProgress","updateActivity","subTitle","now","Date","weekDay","days","dateParse","date","slice","i","day","getDate","month","getMonth","getFullYear","push","getDay","getTime","reverse","type","size","title","map","m","checked","undefined","onChange","target","onClick","CreationFormField","TextField","HabitCreationFormWrapper","StepperLabel","HabitCreationForm","setPopupActive","createHabitCountState","createHabitNameState","setCreateHabitNameState","setCreateHabitCountState","createHabbitAction","createHabitName","label","value","step","count","view","HabitCreationButton","HabitHeader","PopupBackdrop","CloseButton","App","state","notes","useState","isPopupActive","userId","useRef","sberId","userName","userAge","userGender","createHabitCount","userHabits","setUserHabits","assistant","useEffect","getState","current","getStateForAssistant","createAssistant","on","event","sub","then","x","user_id","action","dispatchAssistantAction","year","_id","toLowerCase","updateActivityAction","HabitName","deleteHabitAction","sendData","action_id","new_state","item_selector","items","index","number","id","createHabbit","deleteHabbit","addActivity","deleteActivity","Fragment","fivedays","progress","ReactDOM","render","Device","document","getElementById"],"mappings":"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","file":"static/js/main.8a78be9c.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://desolate-badlands-87176.herokuapp.com/\";\r\n\r\nexport async function createUser(UserId, SberId, Name, Age, Gender) {\r\n  const { data: answer } = await axios.post(API_URL + \"user/\", {\r\n    UserId: UserId,\r\n    SberId: SberId,\r\n    Name: Name,\r\n    Age: Age,\r\n    Gender: Gender,\r\n  });\r\n  return answer;\r\n}\r\nexport async function createHabbit(UserId, Name, DateForEnd) {\r\n  const { data: answer } = await axios.post(API_URL + \"habit\", {\r\n    UserId,\r\n    Name,\r\n    DateForEnd,\r\n  });\r\n  return answer;\r\n}\r\n\r\nexport async function getAllHabit(UserId) {\r\n  const { data: answer } = await axios.get(API_URL + \"habit/\", {\r\n    params: {\r\n      UserId: UserId,\r\n    },\r\n  });\r\n  return answer;\r\n}\r\n\r\nexport async function deleteHabbit(HabitId) {\r\n  const { data: answer } = await axios.delete(\r\n    API_URL + \"habit?HabitId=\" + `${HabitId}`\r\n  );\r\n  return answer;\r\n}\r\n\r\nexport async function addActivity(HabitId, DateOfActivity) {\r\n  const body = {\r\n    HabitId,\r\n    DateOfActivity,\r\n  };\r\n  console.log('body:', body);\r\n  const { data: answer } = await axios.post(API_URL + \"activity\", body);\r\n  return answer;\r\n}\r\nexport async function deleteActivity(HabitId, DateOfActivity) {\r\n  const body = {\r\n    HabitId,\r\n    DateOfActivity,\r\n  };  \r\n  console.log('body:', body);\r\n  const { data: answer } = await axios.delete(`${API_URL}activity?HabitId=${HabitId}&DateOfActivity=${DateOfActivity}`);\r\n  return answer;\r\n}\r\n","import {\r\n  Card,\r\n  CardBody,\r\n  CardContent,\r\n  TextBox,\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Checkbox,\r\n} from \"@sberdevices/plasma-ui\";\r\nimport { IconTrash } from \"@sberdevices/plasma-icons\";\r\nimport styled from \"styled-components\";\r\nimport { formatCurrency } from \"@sberdevices/plasma-ui/utils\";\r\n\r\nconst HabitBoxRow = styled(Row)`\r\n  margin: 2rem 0;\r\n`;\r\n\r\nconst CheckboxContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst IconTrashContainer = styled.div`\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n`;\r\n\r\nconst HabitCardContainer = styled(CardContent)`\r\n  position: relative;\r\n`;\r\n\r\nconst DateTextBox = styled(TextBox)`\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n`;\r\nconst HabitCard = styled(Card)`\r\n  margin: 1.5rem 2rem 0;\r\n  :last-of-type {\r\n    margin-bottom: 10rem;\r\n  }\r\n`;\r\n\r\nconst HabitBox = ({\r\n  habitId,\r\n  habitName,\r\n  progressValue,\r\n  maxValue,\r\n  deleteHabit,\r\n  habitProgress,\r\n  updateActivity,\r\n}) => {\r\n  const subTitle = `${progressValue}/${maxValue}`;\r\n\r\n  let now = new Date();\r\n\r\n  const weekDay = [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"];\r\n\r\n  let days = [];\r\n\r\n  const dateParse = (date) => `0${date}`.slice(-2);\r\n\r\n  for (let i = 0; i < 5; ++i) {\r\n    let day = dateParse(now.getDate());\r\n    let month = dateParse(now.getMonth() + 1);\r\n    let year = now.getFullYear();\r\n\r\n    let date = year + \"-\" + month + \"-\" + day + \"T19:47:00.571Z\";\r\n\r\n    days.push([i, date, weekDay[now.getDay()]]);\r\n    now = new Date(now.getTime() - 1000 * 60 * 60 * 24);\r\n  }\r\n  days = days.reverse();\r\n\r\n  return (\r\n    <HabitCard>\r\n      <CardBody>\r\n        <HabitCardContainer>\r\n          <Container>\r\n            <HabitBoxRow>\r\n              <Col type=\"calc\" size={6}>\r\n                <TextBox size=\"l\" subTitle={subTitle} title={habitName} />\r\n              </Col>\r\n\r\n              {days.map((m) => (\r\n                <Col type=\"calc\" size={1} key={m[0]}>\r\n                  <DateTextBox\r\n                    size=\"m\"\r\n                    title={m[1].slice(5, 10)}\r\n                    subTitle={m[2]}\r\n                  />\r\n                  <CheckboxContainer>\r\n                    <Checkbox\r\n                      checked={habitProgress!=undefined ? habitProgress[m[0]] : 1}\r\n                      onChange={(target) =>\r\n                        updateActivity(habitId, m[1], target.target.checked)\r\n                      }\r\n                    />\r\n                  </CheckboxContainer>\r\n                </Col>\r\n              ))}\r\n            </HabitBoxRow>\r\n          </Container>\r\n          <IconTrashContainer\r\n            onClick={() => {\r\n              deleteHabit(habitId);\r\n            }}\r\n          >\r\n            <IconTrash />\r\n          </IconTrashContainer>\r\n        </HabitCardContainer>\r\n      </CardBody>\r\n    </HabitCard>\r\n  );\r\n};\r\n\r\nexport default HabitBox;\r\n","import {\r\n  Card,\r\n  CardBody,\r\n  TextField,\r\n  TextBox,\r\n  CardContent,\r\n  Button,\r\n  Stepper,\r\n} from \"@sberdevices/plasma-ui\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  background, // Цвет подложки\r\n  gradient, // Градиент\r\n} from \"@sberdevices/plasma-tokens\";\r\n\r\nconst CreationFormField = styled(TextField)`\r\n  flex-grow: 1;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst HabitCard = styled(Card)`\r\n  width: 50%;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 2rem;\r\n  background-color: ${background};\r\n  background-image: ${gradient};\r\n`;\r\nconst HabitCreationFormWrapper = styled.div`\r\n  display: flex;\r\n  margin: 2.5rem 0;\r\n`;\r\n\r\nconst StepperLabel = styled(TextBox)`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst HabitCreationForm = ({\r\n  setPopupActive,\r\n  createHabitCountState,\r\n  createHabitNameState,\r\n  setCreateHabitNameState,\r\n  setCreateHabitCountState,\r\n  createHabitName,\r\n  createHabbitAction,\r\n}) => {\r\n  return (\r\n    <HabitCard>\r\n      <CardBody>\r\n        <CardContent>\r\n          <TextBox size=\"l\" title=\"Создание привычки\" />\r\n          <HabitCreationFormWrapper>\r\n            <CreationFormField\r\n              label=\"Название привычки\"\r\n              value={createHabitNameState}\r\n              onChange={(text) => {\r\n                setCreateHabitNameState(text.target.value);\r\n              }}\r\n            />\r\n            <div>\r\n              <StepperLabel size=\"m\" subTitle=\"Время выработки\" />\r\n              <Stepper\r\n                step={1}\r\n                value={createHabitCountState}\r\n                onChange={(count) => {\r\n                  setCreateHabitCountState(count);\r\n                }}\r\n              />\r\n            </div>\r\n          </HabitCreationFormWrapper>\r\n          <Button\r\n            text=\"Создать\"\r\n            view=\"primary\"\r\n            onClick={() => {\r\n              if (createHabitNameState) {\r\n                setPopupActive(false);\r\n                createHabbitAction();\r\n              }\r\n            }}\r\n          />\r\n        </CardContent>\r\n      </CardBody>\r\n    </HabitCard>\r\n  );\r\n};\r\n\r\nexport default HabitCreationForm;\r\n","import { Button } from \"@sberdevices/plasma-ui\";\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nconst HabitCreationButton = ({onClick}) => {\r\n  return (\r\n\r\n        <Button text=\"Создать\" \r\n        onClick={onClick} view=\"clear\" />\r\n      \r\n  )\r\n}\r\n\r\nexport default HabitCreationButton;\r\n","import styled from 'styled-components'\r\n\r\n     \r\nexport const HabitHeaderWrapper = styled.div`\r\n    filter: blur(8px);\r\n    -webkit-filter: blur(8px);  \r\n`\r\n\r\nexport const HabitHeader = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 1rem 4rem;\r\n    position: sticky;\r\n    top: 0;\r\n    background-color: rgba(0,0,0,.6);\r\n    -webkit-backdrop-filter: blur(10px);\r\n    backdrop-filter: blur(10px);\r\n    `\r\n","import styled from 'styled-components';\r\n\r\nexport const PopupBackdrop = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    background-color: rgba(0,0,0,.6);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0; \r\n`\r\n\r\nexport const CloseButton = styled.div`\r\n  position: absolute;\r\n  top:1rem;\r\n  right:1rem;\r\n`\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport {\r\n  createUser,\r\n  createHabbit,\r\n  getAllHabit,\r\n  deleteHabbit,\r\n  addActivity,\r\n  deleteActivity,\r\n} from \"./APIHelper.js\";\r\n\r\nimport HabitBox from \"./components/HabitBox\";\r\nimport HabitCreationForm from \"./components/HabitCreationForm\";\r\nimport HabitCreationButton from \"./components/HabitCreationButton\";\r\nimport { HabitHeader, HabitHeaderWrapper } from \"./components/HabitHeader\";\r\nimport { CloseButton, PopupBackdrop } from \"./components/PopupStyledComponent\";\r\nimport { IconClose } from \"@sberdevices/plasma-icons\";\r\nimport { Header, Container, TextBox } from \"@sberdevices/plasma-ui\";\r\n\r\n/////////Sber Assistant/////////////////////////\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\n///////////////////////////////////////////////\r\n\r\nconst initializeAssistant = (getState /*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти Habit-tracker`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\nfunction App() {\r\n  const state = {\r\n    notes: [],\r\n  };\r\n  //Хук активности всплывающего окна\r\n  const [isPopupActive, setPopupActive] = useState(false);\r\n\r\n  //Хуки данных пользователя\r\n  const userId = useRef(\"1234555\");\r\n  const [sberId, setSberId] = useState(0);\r\n  const [userName, setUserName] = useState(\"Кирилл1\");\r\n  const [userAge, setUserAge] = useState(20);\r\n  const [userGender, setUserGender] = useState(\"М\");\r\n\r\n  //Хуки создания новой привычки\r\n  const createHabitName = useRef(\"\");\r\n  const createHabitCount = useRef(\"\");\r\n  const [createHabitNameState, setCreateHabitNameState] = useState(\"\");\r\n  const [createHabitCountState, setCreateHabitCountState] = useState(66);\r\n\r\n\r\n  const [userHabits, setUserHabits] = useState([]);\r\n\r\n  //Хуки состояния текущих привычек\r\n  const [checkboxStates, setCheckboxStates] = useState([\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n  ]);\r\n\r\n  //Ассистент Sber\r\n  const assistant = useRef();\r\n\r\n  useEffect(() => {\r\n    //Инициализация ассистента\r\n    assistant.current = initializeAssistant(() => getStateForAssistant());\r\n    assistant.current.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n    assistant.current.on(\"data\", (event /*: any*/) => {\r\n      if (event.type == \"smart_app_data\") {\r\n        console.log(\"User\");\r\n        console.log(event);\r\n        if (event.sub != undefined) {\r\n          console.log(\"Sub\", event.sub);\r\n          userId.current = event.sub;\r\n          createUser(event.sub, sberId, userName, userAge, userGender);\r\n          getAllHabit(event.sub).then((x) => {\r\n            setUserHabits(x);\r\n          });\r\n        } else if (event.user_id != undefined) {\r\n          console.log(\"UserId\", event.user_id);\r\n          userId.current = event.user_id;\r\n          createUser(event.userId, sberId, userName, userAge, userGender);\r\n          getAllHabit(event.user_id).then((x) => {\r\n            setUserHabits(x);\r\n          });\r\n        }\r\n      }\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event;\r\n\r\n      dispatchAssistantAction(action);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAllHabit(userId.current).then((x) => {\r\n      setUserHabits(x);\r\n    });\r\n  }, [userId.current]);\r\n\r\n  useEffect(() => {\r\n    createHabitName.current = createHabitNameState;\r\n  }, [createHabitNameState]);\r\n\r\n  useEffect(() => {\r\n    createHabitCount.current = createHabitCountState;\r\n  }, [createHabitCountState]);\r\n\r\n  const dispatchAssistantAction = async (action) => {\r\n    console.log(\"dispatchAssistantAction\", action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case \"OpenCreateHabitForm\":\r\n          setPopupActive(!isPopupActive);\r\n          break;\r\n        case \"setHabbitName\":\r\n          console.log(action.data);\r\n          setCreateHabitNameState(action.data);\r\n          break;\r\n        case \"setHabbitTime\":\r\n          setCreateHabitCountState(action.data);\r\n          break;\r\n        case \"createHabit\":\r\n          if (createHabitName.current) {\r\n            setPopupActive(false);\r\n            createHabbitAction();\r\n          }\r\n        case \"deleteHabit\":\r\n          deleteHabit(action.data)\r\n          break;\r\n        case \"completeHabit\":\r\n          const year = action.date.year\r\n          const month = action.date.month\r\n          const day = action.date.day\r\n          let HabitId=\"\";\r\n          console.log(action.data)\r\n          userHabits.map(({ _id, Name}, i) => {\r\n            if(Name.toLowerCase() == action.data.toLowerCase()){\r\n              HabitId=_id\r\n              console.log(\"HabitId\")\r\n            }\r\n          });\r\n          if (HabitId == \"\"){\r\n            return\r\n          }\r\n          else{\r\n            updateActivityAction(HabitId, year + \"-\" + month + \"-\" + day + \"T19:47:00.571Z\", true)\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteHabit =(HabitName)=>{\r\n    userHabits.map(({ _id, Name}, i) => {\r\n      if(HabitName.toLowerCase() == Name.toLowerCase()){\r\n        deleteHabitAction(_id);\r\n        assistant.current.sendData({\r\n          action: { action_id: \"successDelete\" },\r\n        });\r\n        return\r\n      }\r\n    });\r\n    assistant.current.sendData({\r\n      action: { action_id: \"BadDelete\" },\r\n    });\r\n  }\r\n\r\n  const getStateForAssistant = () => {\r\n    console.log(\"getStateForAssistant: state:\", state);\r\n    const new_state = {\r\n      item_selector: {\r\n        items: state.notes.map(({ id, title }, index) => ({\r\n          number: index + 1,\r\n          id,\r\n          title,\r\n        })),\r\n      },\r\n    };\r\n    console.log(\"getStateForAssistant: new_state:\", new_state);\r\n    return new_state;\r\n  };\r\n\r\n\r\n\r\n  //Обратотчики рользовательской активности\r\n  const createHabbitAction = () => {\r\n    console.log(\"UserId\", userId.current);\r\n    console.log(\"CreateHabit\", createHabitName.current);\r\n    console.log(\"Count\", createHabitCount);\r\n\r\n    createHabbit(\r\n      userId.current,\r\n      createHabitName.current,\r\n      createHabitCount.current\r\n    ).then(() =>\r\n      getAllHabit(userId.current).then((x) => {\r\n        console.log(x);\r\n        setUserHabits(x);\r\n        assistant.current.sendData({\r\n          action: { action_id: \"successAdd\" },\r\n        });\r\n      })\r\n    );\r\n    createHabitName.current = \"\";\r\n    setCreateHabitNameState(\"\");\r\n    setCreateHabitCountState(66);\r\n    console.log(userHabits)\r\n  };\r\n\r\n\r\n  const deleteHabitAction = (habitId) => {\r\n    deleteHabbit(habitId).then(() =>\r\n      getAllHabit(userId.current).then((x) => {\r\n        setUserHabits(x);\r\n      })\r\n    );\r\n  };\r\n\r\n  const updateActivityAction = (habitId, date, state) => {\r\n    if (state) {\r\n      addActivity(habitId, date).then(() => {getAllHabit(userId.current).then((x) => {\r\n        setUserHabits(x);\r\n      })});\r\n      console.log(\"Add\");\r\n    } else {\r\n      deleteActivity(habitId, date).then(() => {getAllHabit(userId.current).then((x) => {\r\n        setUserHabits(x);\r\n      })});\r\n      console.log(\"Delete\");\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <HabitHeader>\r\n        <TextBox size=\"l\" title={`Ваши привычки:`} />\r\n        <HabitCreationButton\r\n          onClick={() => {\r\n            setPopupActive(!isPopupActive);\r\n            console.log(userId.current);\r\n          }}\r\n        />\r\n      </HabitHeader>\r\n      {userHabits.map(({ _id, Name, DateForEnd, fivedays, progress}, i) => (\r\n        <HabitBox\r\n          habitId={_id}\r\n          habitName={Name}\r\n          progressValue={progress}\r\n          maxValue={DateForEnd}\r\n          habitProgress={fivedays}\r\n          deleteHabit={deleteHabitAction}\r\n          updateActivity={updateActivityAction}\r\n        />\r\n      ))}\r\n\r\n      {isPopupActive ? (\r\n        <div>\r\n          <PopupBackdrop onClick={() => setPopupActive(!isPopupActive)} />\r\n          <HabitCreationForm\r\n            setPopupActive={setPopupActive}\r\n            setCreateHabitCountState={setCreateHabitCountState}\r\n            createHabitNameState={createHabitNameState}\r\n            setCreateHabitNameState={setCreateHabitNameState}\r\n            createHabitCountState={createHabitCountState}\r\n            createHabitName={createHabitName}\r\n            createHabbitAction={createHabbitAction}\r\n          />\r\n          <CloseButton onClick={() => setPopupActive(!isPopupActive)}>\r\n            <IconClose />\r\n          </CloseButton>\r\n        </div>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './GlobalStyles'; // Тема оформления (цветовая схема)\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <DeviceThemeProvider>\r\n        <GlobalStyle />\r\n        <App />\r\n    </DeviceThemeProvider>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}